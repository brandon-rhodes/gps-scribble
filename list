#!/usr/bin/env python3

#import argparse
import pytz
import sys
from pathlib import Path
from generate import CachingGeocoder, parse_trackpoints

def main(argv):
    # parser = argparse.ArgumentParser(description=put description here)
    # parser.add_argument('integers', metavar='N', type=int, nargs='+',
    #                     help='an integer for the accumulator')
    # parser.add_argument('--sum', dest='accumulate', action='store_const',
    #                     const=sum, default=max,
    #                     help='sum the integers (default: find the max)')
    # args = parser.parse_args(argv)
    # print(args.accumulate(args.integers))

    # p = Path('~/Archive/Garmin')
    # p = p.expanduser()
    cache = Path('cache')

    # for path in sorted(p.iterdir()):
    #     c = cache / path.name

        # print(c)

    geocoder = CachingGeocoder(cache / 'geocodings.json')

    for path in sorted(cache.iterdir()):
        if not path.name.endswith('.xml'):
            continue
        with open(path, 'rb') as f:
            text = f.read()
        trackpoints = list(parse_trackpoints(text))
        if not trackpoints:
            print('             EMPTY                 {}'.format(path.name))
            continue
        track = Track(trackpoints)
        #print(trackpoints)
        print('{:%Y-%b-%d %H:%M} - {:%H:%M}  {:7.3f} km  {:24} {}'.format(
            track.start(),
            track.end(),
            track.length() / 1e3,
            track.where(geocoder),
            path.name,
        ))
        #break

    geocoder.save()

class Track(object):
    def __init__(self, points):
        self.points = points

    def start(self):
        lat = self.points[0].latitude_degrees
        lon = self.points[0].longitude_degrees

        from timezonefinder import TimezoneFinder
        tf = TimezoneFinder()
        name = tf.timezone_at(lng=lon, lat=lat)
        tz = pytz.timezone(name)
        t = self.points[0].time
        t = pytz.utc.localize(t).astimezone(tz)
        return t

    def end(self):
        lat = self.points[0].latitude_degrees
        lon = self.points[0].longitude_degrees

        from timezonefinder import TimezoneFinder
        tf = TimezoneFinder()
        name = tf.timezone_at(lng=lon, lat=lat)
        tz = pytz.timezone(name)
        t = self.points[-1].time
        t = pytz.utc.localize(t).astimezone(tz)
        return t

    def length(self):
        #return sum(p.distance_meters for p in self.points)
        return self.points[-1].distance_meters

    def where(self, geocoder):
        lat = self.points[0].latitude_degrees
        lon = self.points[0].longitude_degrees
        geocodes = geocoder.search(lat, lon)
        geocode = geocodes[0]
        #print(geocode)
        return '{} {}'.format(geocode['admin1'], geocode['name'])

if __name__ == '__main__':
    main(sys.argv[1:])
